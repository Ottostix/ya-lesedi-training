// Cloud Database Schema - Firestore/Realtime Database Structure
// Defines the data models and collection structure for cloud storage

/**
 * USERS Collection
 * Path: /users/{userId}
 */
export interface UserDocument {
  id: string;
  username: string;
  email: string;
  fullName: string;
  role: 'master_admin' | 'store_manager' | 'staff';
  loginPin: string;
  contactNumber: string;
  profileImage?: string;
  restaurantIds: string[]; // Array of restaurant IDs the user belongs to
  verificationStatus: 'pending' | 'verified' | 'rejected';
  verificationDate?: string;
  verifiedBy?: string;
  createdDate: string;
  lastLogin?: string;
  isActive: boolean;
  metadata: {
    loginAttempts: number;
    lastPasswordChange: string;
    twoFactorEnabled: boolean;
  };
}

/**
 * RESTAURANTS Collection
 * Path: /restaurants/{restaurantId}
 */
export interface RestaurantDocument {
  id: string;
  name: string;
  location: string;
  address: string;
  contactPerson: string;
  contactNumber: string;
  email: string;
  staffCount: number;
  status: 'active' | 'inactive' | 'suspended';
  createdDate: string;
  managerIds: string[];
  staffIds: string[];
  metadata: {
    registrationNumber: string;
    beeStatus: string;
    industry: string;
    size: 'small' | 'medium' | 'large';
  };
}

/**
 * TRAINING_MANUALS Collection
 * Path: /restaurants/{restaurantId}/training_manuals/{manualId}
 */
export interface TrainingManualDocument {
  id: string;
  title: string;
  description: string;
  category: string;
  fileId: string; // Reference to file in cloud storage
  fileName: string;
  fileSize: number;
  fileType: 'pdf' | 'doc' | 'docx' | 'txt' | 'image';
  restaurantId: string;
  uploadedBy: string;
  uploadedDate: string;
  lastModified: string;
  status: 'active' | 'archived' | 'draft';
  isDefault: boolean;
  version: number;
  tags: string[];
  metadata: {
    pageCount?: number;
    wordCount?: number;
    language: string;
    difficulty: 'beginner' | 'intermediate' | 'advanced';
  };
}

/**
 * QUIZZES Collection
 * Path: /restaurants/{restaurantId}/quizzes/{quizId}
 */
export interface QuizDocument {
  id: string;
  manualId: string;
  title: string;
  description: string;
  restaurantId: string;
  totalQuestions: number;
  passingScore: number;
  timeLimit?: number; // in minutes
  createdDate: string;
  createdBy: string;
  lastModified: string;
  status: 'active' | 'archived' | 'draft';
  autoGenerated: boolean;
  aiModel?: string; // e.g., 'gpt-4', 'claude-3'
  questions: QuizQuestionDocument[];
  metadata: {
    difficulty: 'easy' | 'medium' | 'hard';
    estimatedDuration: number; // in minutes
    retakesAllowed: number;
    randomizeQuestions: boolean;
    randomizeAnswers: boolean;
  };
}

/**
 * QUIZ_QUESTIONS
 * Embedded in QUIZZES Collection
 */
export interface QuizQuestionDocument {
  id: string;
  question: string;
  questionType: 'multiple_choice' | 'true_false' | 'short_answer';
  options: string[];
  correctAnswer: string;
  explanation: string;
  difficulty: 'easy' | 'medium' | 'hard';
  tags: string[];
}

/**
 * QUIZ_RESULTS Collection
 * Path: /restaurants/{restaurantId}/quiz_results/{resultId}
 */
export interface QuizResultDocument {
  id: string;
  quizId: string;
  manualId: string;
  userId: string;
  restaurantId: string;
  score: number;
  totalQuestions: number;
  correctAnswers: number;
  passed: boolean;
  completedDate: string;
  timeTaken: number; // in seconds
  answers: QuizAnswerDocument[];
  metadata: {
    attempt: number;
    certificateIssued: boolean;
    certificateId?: string;
    certificateDate?: string;
  };
}

/**
 * QUIZ_ANSWERS
 * Embedded in QUIZ_RESULTS Collection
 */
export interface QuizAnswerDocument {
  questionId: string;
  selectedAnswer: string;
  isCorrect: boolean;
  timeSpent: number; // in seconds
}

/**
 * ANALYTICS Collection
 * Path: /restaurants/{restaurantId}/analytics/{date}
 */
export interface AnalyticsDocument {
  id: string;
  restaurantId: string;
  date: string; // YYYY-MM-DD
  totalStaff: number;
  staffTrained: number;
  trainingCompletionRate: number; // percentage
  averageQuizScore: number;
  modulesCompleted: number;
  quizzesCompleted: number;
  certificatesIssued: number;
  activeUsers: number;
  metadata: {
    topPerformers: Array<{ userId: string; score: number }>;
    mostCompletedModule: string;
    averageTimePerQuiz: number;
  };
}

/**
 * NOTIFICATIONS Collection
 * Path: /users/{userId}/notifications/{notificationId}
 */
export interface NotificationDocument {
  id: string;
  userId: string;
  restaurantId: string;
  title: string;
  message: string;
  type: 'training' | 'reminder' | 'achievement' | 'announcement' | 'system';
  priority: 'low' | 'medium' | 'high';
  read: boolean;
  readDate?: string;
  createdDate: string;
  expiryDate?: string;
  actionUrl?: string;
  metadata: {
    source: string;
    relatedId?: string; // e.g., quizId, manualId
  };
}

/**
 * CERTIFICATES Collection
 * Path: /restaurants/{restaurantId}/certificates/{certificateId}
 */
export interface CertificateDocument {
  id: string;
  userId: string;
  restaurantId: string;
  quizId: string;
  manualId: string;
  certificateNumber: string;
  issuedDate: string;
  expiryDate?: string;
  score: number;
  certificateUrl: string;
  status: 'valid' | 'expired' | 'revoked';
  metadata: {
    issuer: string;
    signedBy: string;
    verificationCode: string;
  };
}

/**
 * AUDIT_LOG Collection
 * Path: /restaurants/{restaurantId}/audit_logs/{logId}
 */
export interface AuditLogDocument {
  id: string;
  restaurantId: string;
  userId: string;
  action: string;
  entityType: string; // 'user', 'quiz', 'manual', etc.
  entityId: string;
  changes: Record<string, { before: any; after: any }>;
  timestamp: string;
  ipAddress: string;
  userAgent: string;
  status: 'success' | 'failure';
  metadata: {
    reason?: string;
    approvedBy?: string;
  };
}

/**
 * Database Indexes for optimal query performance
 */
export const RECOMMENDED_INDEXES = {
  users: [
    { fields: ['restaurantIds', 'isActive'] },
    { fields: ['email'] },
    { fields: ['role', 'createdDate'] }
  ],
  restaurants: [
    { fields: ['status', 'createdDate'] },
    { fields: ['managerIds'] }
  ],
  training_manuals: [
    { fields: ['restaurantId', 'status'] },
    { fields: ['category', 'isDefault'] },
    { fields: ['uploadedDate'] }
  ],
  quizzes: [
    { fields: ['restaurantId', 'status'] },
    { fields: ['manualId'] },
    { fields: ['createdDate'] }
  ],
  quiz_results: [
    { fields: ['restaurantId', 'completedDate'] },
    { fields: ['userId', 'quizId'] },
    { fields: ['passed'] }
  ],
  analytics: [
    { fields: ['restaurantId', 'date'] },
    { fields: ['date'] }
  ],
  notifications: [
    { fields: ['userId', 'read'] },
    { fields: ['createdDate'] }
  ],
  certificates: [
    { fields: ['userId', 'restaurantId'] },
    { fields: ['status', 'expiryDate'] }
  ]
};

/**
 * Security Rules Template for Firestore
 */
export const FIRESTORE_SECURITY_RULES = `
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      allow read: if request.auth.uid == userId || 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'master_admin';
      allow write: if request.auth.uid == userId || 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'master_admin';
    }

    // Restaurants collection
    match /restaurants/{restaurantId} {
      allow read: if request.auth.uid in resource.data.managerIds || 
                     request.auth.uid in resource.data.staffIds ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'master_admin';
      allow write: if request.auth.uid in resource.data.managerIds ||
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'master_admin';

      // Training manuals subcollection
      match /training_manuals/{manualId} {
        allow read: if parent.read;
        allow write: if parent.write;
      }

      // Quizzes subcollection
      match /quizzes/{quizId} {
        allow read: if parent.read;
        allow write: if parent.write;
      }

      // Quiz results subcollection
      match /quiz_results/{resultId} {
        allow read: if request.auth.uid == resource.data.userId || parent.write;
        allow create: if request.auth.uid == request.resource.data.userId;
      }

      // Analytics subcollection
      match /analytics/{date} {
        allow read: if parent.read;
        allow write: if parent.write;
      }
    }

    // Notifications collection
    match /users/{userId}/notifications/{notificationId} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId ||
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'master_admin';
    }
  }
}
`;

